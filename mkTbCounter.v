//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Jun  3 17:32:07 BRT 2016
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTbCounter(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register state
  reg [15 : 0] state;
  wire [15 : 0] state$D_IN;
  wire state$EN;

  // ports of submodule counter
  wire [7 : 0] counter$load_newval, counter$read;
  wire counter$EN_increment, counter$EN_load, counter$readflag;

  // inputs to muxes for submodule ports
  wire MUX_state$write_1__SEL_1;

  // submodule counter
  mkCounter counter(.CLK(CLK),
		    .RST_N(RST_N),
		    .load_newval(counter$load_newval),
		    .EN_load(counter$EN_load),
		    .EN_increment(counter$EN_increment),
		    .read(counter$read),
		    .RDY_read(),
		    .term(),
		    .RDY_term(),
		    .readflag(counter$readflag),
		    .RDY_readflag(),
		    .RDY_load(),
		    .RDY_increment());

  // inputs to muxes for submodule ports
  assign MUX_state$write_1__SEL_1 = state == 16'd3 && counter$readflag ;

  // register state
  assign state$D_IN = MUX_state$write_1__SEL_1 ? 16'd2 : 16'd3 ;
  assign state$EN =
	     state == 16'd3 && counter$readflag ||
	     state == 16'd4 && counter$read != 8'd42 ||
	     state == 16'd0 ;

  // submodule counter
  assign counter$load_newval = 8'd42 ;
  assign counter$EN_load = state == 16'd0 ;
  assign counter$EN_increment = state == 16'd3 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        state <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    state = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE) if (state == 16'd3) $display(counter$read);
    if (RST_N != `BSV_RESET_VALUE)
      if (state == 16'd2) $display("TESTS FINISHED");
    if (RST_N != `BSV_RESET_VALUE) if (state == 16'd2) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTbCounter

